@page "/"
@attribute [Authorize(Policy = "GroupMembership")]

@using Azure
@using Azure.Core
@using Azure.Storage
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure.Messaging.EventGrid
@using System.Timers
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using Microsoft.Kiota.Abstractions.Authentication

@inject IHttpClientFactory HttpClientFactory
@inject IHostApiService HostApiService
@inject IAuthenticationProvider AuthenticationProvider
@inject IConfiguration Configuration

<PageTitle>Crucible File Transfer Service (CFTS)</PageTitle>

<div class="mt-2 ps-5 pe-5">
    <div style="min-height: 10em; margin-top: 1em;">
        <div class="mb-3">
            <label class="mb-1 text-secondary" for="uploadFileInput" id="uploadFileLabel">Select a file to upload <span style="color: crimson;">(Max size 1TB)</span>:</label>
            <InputFile class="form-control" @key="@(uploadFileInputKey)" id="uploadFileInput" OnChange="@OnFileSelectionChange" disabled="@(isUploading)"></InputFile>
        </div>

        @if (isUploading)
        {

            <div class="mb-3">
                <div class="progress">
                    <div class="progress-bar" style="width: @progressValue">@progressValue</div>
                </div>
                <div class="text-end small text-secondary">
                    <span>@bytesTransferred of @currentSelectedFileSize</span>
                </div>
            </div>
        }

        <div class="mb-3 text-secondary">
            <span>Note: Ensure ingress files do not have file names containing CUI information.</span>
        </div>
        <div style="text-align:end">
            <button class="btn btn-primary" id="uploadFileSubmitButton" type="submit" @onclick="@Upload" disabled="@(!isValid || isUploading)">
                @if (isUploading)
                {
                    <span class="spinner-grow spinner-grow-sm"></span>
                }
                Upload
            </button>
        </div>
    </div>
    <div style="border-top: #ccc solid 1px; margin-top: 2em; padding-top: 2em;">
        <TabControl>

            <TabPage Title="General">
                <div class="d-flex justify-content-around mt-5">
                    <div class="card" style="width: 18em; min-height: 16em;">
                        <div class="card-header">Frequently Asked Questions</div>
                        <div class="card-body">
                            <p class="card-text text-secondary">Have questions about the Crucible File Transfer Service? Please visit our FAQ by clicking the link below.</p>
                            <NavLink class="nav-link card-link" href="faq">FAQ</NavLink>
                        </div>
                    </div>
                    <div class="card" style="width: 18em; min-height: 16em;">
                        <div class="card-header">User's Guide</div>
                        <div class="card-body">
                            <p class="card-text text-secondary">Want detailed guidance on the use of the Crucible File Transfer Service? Please download the "User's Guide'" by clicking the link below.</p>
                            <a href="./Downloads/User Guide.pdf" download class="card-link">Download User's Guide</a>
                        </div>
                    </div>
                    <div class="card" style="width: 18em; min-height: 16em;">
                        <div class="card-header">Report an Issue</div>
                        <div class="card-body">
                            <p class="card-text text-secondary">Did you run in to an issue? Please message the TC support channel using the "@@tchelp" tag.</p>
                            <a href="https://chat.il4.dso.mil/usaf-76-sweg/channels/tcsupport" class="card-link">Message support</a>
                        </div>
                    </div>
                </div>

            </TabPage>

            <TabPage Title="Transfers">

                <TransferEventsList UserPrincipalName=@currentUser?.UserPrincipalName></TransferEventsList>

            </TabPage>

        </TabControl>
    </div>

</div>


@code {
    private HttpClient? httpClient;
    private AppSettings? appSettings;
    private User? currentUser;

    private long maxFileSize = 1099511627776;
    private bool exceedsMaxFileSize = false;

    private bool isValid = false;
    private bool isUploading = false;
    private string progressValue = "0%";
    private string bytesTransferred = "0";
    private string currentSelectedFileSize = "0";

    private Timer DelayedHideProgressBarTimer = new Timer
        {
            Interval = 2000,
            AutoReset = false,
            Enabled = true
        };

    private IBrowserFile? currentFile;
    public Guid uploadFileInputKey;

    protected override async Task OnInitializedAsync()
    {
        DelayedHideProgressBarTimer.Elapsed += OnDelayedHideProgressBar;
        appSettings = await HostApiService.GetAppSettingsAsync();

        var graphClient = new GraphServiceClient(
            HttpClientFactory.CreateClient("DefaultHttpClient"),
            AuthenticationProvider,
            Configuration.GetSection("MicrosoftGraph")["BaseUrl"]
        );
        currentUser = await graphClient.Me.GetAsync();
    }

    [CascadingParameter]
    public AlertControl? Alert { get; set; }

    private void OnProgressUpdated(Object sender, ProgressUpdatedEventArgs e)
    {
        bytesTransferred = e.BytesTransferred.ToString();
        progressValue = e.PercentageAsFormattedString;
        StateHasChanged();
    }

    private void OnDelayedHideProgressBar(Object sender, ElapsedEventArgs e)
    {
        isUploading = false;
        progressValue = "0%";
        bytesTransferred = "0";
        currentSelectedFileSize = "0";
        StateHasChanged();
        DelayedHideProgressBarTimer.Stop();
    }

    private void OnFileSelectionChange(InputFileChangeEventArgs e)
    {
        isValid = Validate(e.File);
        if (isValid)
        {
            currentSelectedFileSize = e.File.Size.ToString();
            currentFile = e.File;
        }
    }

    private async Task Upload()
    {
        try
        {
            if (appSettings != null
                && appSettings.UploadStorageAccountName != null
                && appSettings.UploadContainerName != null
                && appSettings.UploadStorageAccountSasToken != null
                && currentFile != null)
            {
                string baseStoragePath = "blob.core.usgovcloudapi.net";
                var accountName = appSettings.UploadStorageAccountName;
                var uploadContainer = appSettings.UploadContainerName;
                var sasToken = appSettings.UploadStorageAccountSasToken;

                string path = $"https://{accountName}.{baseStoragePath}/{uploadContainer}/{currentFile.Name}";
                var azureBlobUri = new Uri(path);

                AzureSasCredential sasCredentials = new AzureSasCredential(sasToken);
                BlobClient blobClient = new BlobClient(azureBlobUri, sasCredentials, new BlobClientOptions());

                UploadProgressHandler uploadProgressHandler = new UploadProgressHandler
                    {
                        FileSize = currentFile.Size
                    };
                uploadProgressHandler.ProgressUpdated += OnProgressUpdated;

                BlobUploadOptions blobUploadOptions = new BlobUploadOptions
                    {
                        HttpHeaders = new BlobHttpHeaders
                        {
                            ContentType = currentFile.ContentType
                        },
                        TransferOptions = new StorageTransferOptions
                        {
                            InitialTransferSize = 1024 * 1024 * 20,
                            MaximumConcurrency = 20,
                            MaximumTransferSize = 1024 * 1024 * 20
                        },
                        Metadata = new Dictionary<string, string>
                        {
                            { "userprincipalname", currentUser.UserPrincipalName },
                            { "userid", currentUser.Id },
                            { "originationdatetime", DateTime.UtcNow.ToString() },
                            { "transferid", Guid.NewGuid().ToString() },
                            { "destinationimpactlevel", EnvironmentImpactLevel.IL5.ToString() }
                        },
                        ProgressHandler = uploadProgressHandler
                    };

                isUploading = true;
                Alert?.Show("Please do not close or refresh the browser until the upload is complete.", "warning");

                TransferInfo transferInfo = new TransferInfo
                {
                    TransferId = Guid.Parse(blobUploadOptions.Metadata["transferid"]),
                    OriginatingUserPrincipalName = blobUploadOptions.Metadata["userprincipalname"],
                    OriginationDateTime = DateTime.Parse(blobUploadOptions.Metadata["originationdatetime"]),
                    FileName = currentFile.Name,
                    FilePath = uploadContainer,
                    ImpactLevel = (EnvironmentImpactLevel)Enum.Parse(typeof(EnvironmentImpactLevel), blobUploadOptions.Metadata["destinationimpactlevel"]),
                };

                EventGridPublisherClient uploadInitiatedPublisher = new EventGridPublisherClient(
                    new Uri(appSettings.UploadInitiatedTopicUri),
                    new AzureKeyCredential(appSettings.UploadInitiatedTopicKey));

                EventGridEvent uploadInitiatedEventGridEvent = new EventGridEvent(
                    "FileTransferService/Upload",
                    "Initiated",
                    "1.0",
                    transferInfo
                );
                await uploadInitiatedPublisher.SendEventAsync(uploadInitiatedEventGridEvent);

                await blobClient.UploadAsync(currentFile.OpenReadStream(maxFileSize), blobUploadOptions);
                Reset();

                EventGridPublisherClient uploadCompletedPublisher = new EventGridPublisherClient(
                    new Uri(appSettings.UploadCompletedTopicUri),
                    new AzureKeyCredential(appSettings.UploadCompletedTopicKey));

                EventGridEvent uploadCompletedEventGridEvent = new EventGridEvent(
                    "FileTransferService/Upload",
                    "Completed",
                    "1.0",
                    transferInfo
                );
                await uploadCompletedPublisher.SendEventAsync(uploadCompletedEventGridEvent);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool Validate(IBrowserFile file)
    {
        if (file != null)
        {
            exceedsMaxFileSize = !(file.Size < maxFileSize);
            if (!exceedsMaxFileSize)
            {
                return true;
            }
            return false;
        }
        return false;
    }

    private void Reset()
    {
        uploadFileInputKey = Guid.NewGuid();
        currentFile = null;
        exceedsMaxFileSize = false;
        isValid = false;
        Alert?.Hide();

        DelayedHideProgressBarTimer.Start();

    }
}
